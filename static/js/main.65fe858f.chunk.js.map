{"version":3,"sources":["components/SortingVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["SortingVisualizer","props","state","array","this","createArray","newArr","i","push","Math","floor","random","setState","console","log","arr","len","length","min","setTimeout","j","tmp","inputArr","key","index","left","right","partition","quickSort","pivot","temp","className","onClick","bubbleSort","selectionSort","insertionSort","map","value","idx","style","height","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.65fe858f.chunk.js","sourcesContent":["import React from 'react';\r\nimport { render } from '@testing-library/react';\r\nimport '../App.css'\r\n\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        this.state = {\r\n          array: [],\r\n        };\r\n      }\r\n    \r\n      componentDidMount() {\r\n        this.createArray();\r\n      }\r\n      createArray() {\r\n        const newArr = [];\r\n        for (let i = 0; i < 150; i++) {\r\n          newArr.push(Math.floor(Math.random() * 450) + 5);\r\n        }\r\n        this.setState({ array: newArr });\r\n        console.log(\"newArry = \" + newArr);\r\n      }\r\n\r\n      \r\nselectionSort (arr) {\r\n    let len = arr.length;\r\n    for (let i = 0; i < len; i++) {\r\n      let min = i;\r\n      setTimeout(() => {\r\n        for (let j = i + 1; j < len; j++) {\r\n            \r\n          if (arr[min] > arr[j]) {\r\n            min = j;\r\n          }\r\n        }\r\n            \r\n        \r\n        if (min !== i) {\r\n          let tmp = arr[i];\r\n          arr[i] = arr[min];\r\n          arr[min] = tmp;\r\n        }\r\n\r\n        this.setState({ array: arr });\r\n      }, i * 100);\r\n    \r\n    \r\n    }\r\n  };\r\n\r\nbubbleSort(inputArr)  {\r\n    \r\n    let len = inputArr.length;\r\n    for (let i = 0; i < len; i++) {\r\n      \r\n        for (let j = 0; j < len; j++) {\r\n            setTimeout(() => {\r\n          if (inputArr[j] > inputArr[j + 1]) {\r\n            let tmp = inputArr[j];\r\n            inputArr[j] = inputArr[j + 1];\r\n            inputArr[j + 1] = tmp;\r\n            this.setState({ array: inputArr });\r\n          }\r\n        \r\n      }, i * 300);\r\n    }\r\n    }\r\n  };\r\n\r\ninsertionSort (inputArr) {\r\n    let length = inputArr.length;\r\n\r\n    for (let i = 1; i < length; i++) {\r\n      setTimeout(() => {\r\n        let key = inputArr[i];\r\n        let j = i - 1;\r\n        while (j >= 0 && inputArr[j] > key) {\r\n          inputArr[j + 1] = inputArr[j];\r\n          j = j - 1;\r\n        }\r\n        inputArr[j + 1] = key;\r\n\r\n        this.setState({ array: inputArr });\r\n      }, i * 100);\r\n    }\r\n  };\r\n\r\n quickSort(arr, left = 0, right = arr.length - 1) {\r\n     \r\n    let len = arr.length,\r\n      index;\r\n      setTimeout(() => {\r\n      if (len > 1) {\r\n        index = this.partition(arr, left, right);\r\n\r\n        if (left < index - 1) {\r\n          this.quickSort(arr, left, index - 1);\r\n        }\r\n\r\n        if (index < right) {\r\n          this.quickSort(arr, index, right);\r\n        }\r\n      }\r\n\r\n      this.setState({ array: arr });\r\n    },  300);\r\n  }\r\n\r\npartition(arr, left, right) {\r\n    let middle = Math.floor((right + left) / 2),\r\n      pivot = arr[middle],\r\n      i = left,\r\n      j = right;\r\n\r\n    while (i <= j) {\r\n      while (arr[i] < pivot) {\r\n        i++;\r\n      }\r\n\r\n      while (arr[j] > pivot) {\r\n        j--;\r\n      }\r\n\r\n      if (i <= j) {\r\n        [arr[i], arr[j]] = [arr[j], arr[i]];\r\n        i++;\r\n        j--;\r\n      }\r\n    }\r\n    \r\n    return i;\r\n  }\r\n\r\nswap(arr, i, j) {\r\n    var temp = arr[i];\r\n    arr[i] = arr[j];\r\n    arr[j] = temp;\r\n  }\r\n\r\n      render() {\r\n        const { array } = this.state;\r\n        return (\r\n          <div>\r\n            <div>\r\n              <button className=\"btn\" onClick={() => this.createArray()}>\r\n                New Array\r\n              </button>\r\n              <button className=\"btn\" onClick={() => this.bubbleSort(this.state.array)}>\r\n                Bubble Sort\r\n              </button>\r\n              <button\r\n                className=\"btn\"\r\n                onClick={() => this.selectionSort(this.state.array)}\r\n              >\r\n                Selection Sort\r\n              </button>\r\n              <button\r\n                className=\"btn\"\r\n                onClick={() => this.insertionSort(this.state.array)}\r\n              >\r\n                Insertion Sort\r\n              </button>\r\n    \r\n              <button\r\n                className=\"btn\"\r\n                onClick={() => this.quickSort(this.state.array)}\r\n              >\r\n                Quick sort\r\n              </button>\r\n            </div>\r\n            <div className=\"arrayContainer\">\r\n              {array.map((value, idx) => (\r\n                <div\r\n                  className=\"arrayBar\"\r\n                  key={idx}\r\n                  style={{ height: `${value}px` }}\r\n                ></div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n    ","import React from 'react';\nimport SortingVisualizer from './components/SortingVisualizer'\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}