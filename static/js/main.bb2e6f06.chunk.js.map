{"version":3,"sources":["components/SortingVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["SortingVisualizer","props","state","array","this","createArray","newArr","i","push","Math","floor","random","setState","arr","arrayBars","document","getElementsByClassName","len","length","barOneStyle","style","min","setTimeout","j","backgroundColor","tmp","inputArr","sortedValue","sortedBarStyle","console","log","key","className","onClick","window","location","reload","bubbleSort","selectionSort","insertionSort","map","value","idx","height","React","Component","App","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bb2e6f06.chunk.js","sourcesContent":["import React from 'react';\r\nimport { render } from '@testing-library/react';\r\nimport '../App.css'\r\n\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);       \r\n    \r\n        this.state = {\r\n          array: []         \r\n        };\r\n      }\r\n    \r\n      componentDidMount() {\r\n        \r\n        this.createArray();\r\n      }\r\n      createArray() {   \r\n       \r\n        const newArr = [];        \r\n        for (let i = 0; i < 150; i++) {\r\n          newArr.push(Math.floor(Math.random() * 450) + 5);         \r\n          \r\n        }\r\n        this.setState({ array: newArr });      \r\n      }\r\n    \r\n\r\nselectionSort (arr) {\r\n  const arrayBars = document.getElementsByClassName('arrayBar');\r\n  const color = \"#00FF00\";\r\n  let sortedValue = 0;\r\n    let len = arr.length;\r\n    for (let i = 0; i < len; i++) {\r\n      const barOneStyle = arrayBars[i].style;\r\n      \r\n      let min = i;\r\n      setTimeout(() => {\r\n        for (let j = i + 1; j <= len; j++) {\r\n          barOneStyle.backgroundColor = color;\r\n          sortedValue++;\r\n            \r\n          if (arr[min] > arr[j]) {\r\n            min = j;\r\n          }\r\n        }\r\n            \r\n        \r\n        if (min !== i) {\r\n          let tmp = arr[i];\r\n          arr[i] = arr[min];\r\n          arr[min] = tmp;\r\n        }\r\n\r\n        this.setState({ array: arr });\r\n      }, i * 100);\r\n    \r\n    \r\n    }\r\n  };\r\n\r\nbubbleSort(inputArr)  {\r\n\r\n\r\n  const arrayBars = document.getElementsByClassName('arrayBar');\r\n\r\n  const green = \"#00FF00\";\r\n  const red = \"rgb(255,0,0)\"\r\n  \r\n  let sortedValue = inputArr.length;  \r\n    \r\n    let len = inputArr.length;\r\n    for (let i = 0; i < len; i++) {\r\n      sortedValue--;\r\n      \r\n      const sortedBarStyle = arrayBars[sortedValue].style;\r\n\r\n   \r\n      \r\n        for (let j = 0; j <= len; j++) {\r\n            setTimeout(() => {\r\n              sortedBarStyle.backgroundColor = green;\r\n            \r\n          if (inputArr[j] > inputArr[j + 1]) {\r\n            let tmp = inputArr[j];    \r\n            \r\n            \r\n            inputArr[j] = inputArr[j + 1];\r\n\r\n            inputArr[j + 1] = tmp;\r\n           \r\n        \r\n         \r\n            this.setState({ array: inputArr });\r\n          }\r\n        \r\n      }, i * 200);\r\n    }\r\n    }\r\n  };\r\n\r\ninsertionSort (inputArr) {\r\n    let length = inputArr.length;\r\n    \r\n    const arrayBars = document.getElementsByClassName('arrayBar');\r\n    const color = \"#00FF00\";\r\n    let sortedValue = 0;\r\n    \r\n\r\n    for (let i = 1; i <= length; i++) {\r\n      const barOneStyle = arrayBars[sortedValue].style;\r\n      sortedValue++;\r\n      console.log(sortedValue)\r\n      setTimeout(() => {\r\n        barOneStyle.backgroundColor = color;\r\n        \r\n        let key = inputArr[i];\r\n        let j = i - 1;\r\n        while (j >= 0 && inputArr[j] > key) {\r\n          \r\n        \r\n          inputArr[j + 1] = inputArr[j];\r\n          j = j - 1;\r\n          barOneStyle.backgroundColor = color;\r\n        }\r\n        inputArr[j + 1] = key;\r\n        \r\n        this.setState({ array: inputArr });\r\n      }, i * 100);\r\n    }\r\n  };\r\n\r\n\r\n\r\n      render() {\r\n      //  const { array } = this.state;\r\n        return (\r\n          <div>\r\n            <div>\r\n              {/* <button className=\"btn\" onClick={() => this.createArray()}>\r\n                New Array\r\n              </button> */}\r\n              <button className=\"btn\" onClick={() => window.location.reload(false)}>New Array</button>\r\n              <button className=\"btn\" onClick={() => this.bubbleSort(this.state.array)}>\r\n                Bubble Sort\r\n              </button>\r\n              <button\r\n                className=\"btn\"\r\n                onClick={() => this.selectionSort(this.state.array)}\r\n              >\r\n                Selection Sort\r\n              </button>\r\n              <button\r\n                className=\"btn\"\r\n                onClick={() => this.insertionSort(this.state.array)}\r\n              >\r\n                Insertion Sort\r\n              </button>\r\n\r\n              \r\n\r\n            </div>\r\n            <div className=\"arrayContainer\">\r\n              {this.state.array.map((value, idx) => (\r\n                <div\r\n                  className=\"arrayBar\"\r\n                  key={idx}\r\n                  style={{ height: `${value}px`, backgroundColor: 'rgb(55, 192, 238)'}}\r\n                ></div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n    ","import React from 'react';\nimport SortingVisualizer from './components/SortingVisualizer'\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}